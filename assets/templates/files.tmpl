{{template "public/header" .}}
<div class="main-container">
    <h1>📁 File Upload to Telegram</h1>
    <p class="subtitle">Secure, Fast, Permanent Storage</p>
    
    <div class="upload-box">
        <div class="drop-zone" id="dropZone">
            <div class="upload-icon">📤</div>
            <p class="drop-text">Drag files here or click to select</p>
            <label for="uploadFile" id="uploadFileLabel" class="file-label">
                Choose Files
            </label>
            <input type="file" name="file" id="uploadFile" class="custom-file-input" multiple>
        </div>
        
        <button id="uploadButton" class="upload-button" disabled>
            🈳 No file
        </button>
        
        <div class="features">
            <span class="feature">📊 Multiple Files</span>
            <span class="feature">🔒 Secure</span>
            <span class="feature">⚡ Fast</span>
        </div>
    </div>
    
    <div id="loading" class="loading">Uploading...</div>
    <div id="response" class="ui-widget"></div>
</div>

<style>
.main-container {
    max-width: 600px;
    margin: 20px auto;
    padding: 0 15px;
    box-sizing: border-box;
}

.main-container h1 {
    text-align: center;
    color: #333;
    margin-bottom: 8px;
    font-size: 1.8rem;
}

.subtitle {
    text-align: center;
    color: #666;
    margin-bottom: 30px;
    font-size: 0.95rem;
}

.upload-box {
    background: #fff;
    border-radius: 12px;
    padding: 30px 20px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    margin-bottom: 20px;
}

.drop-zone {
    border: 2px dashed #007bff;
    border-radius: 8px;
    padding: 40px 20px;
    text-align: center;
    transition: all 0.3s ease;
    background: #f8f9fa;
    margin-bottom: 20px;
}

.drop-zone:hover {
    border-color: #0056b3;
    background: #e3f2fd;
}

.drop-zone.drag-over {
    border-color: #28a745;
    background: #e8f5e8;
    transform: scale(1.01);
}

.upload-icon {
    font-size: 2.5rem;
    margin-bottom: 15px;
}

.drop-text {
    color: #495057;
    margin-bottom: 20px;
    font-size: 1rem;
}

.file-label {
    display: inline-block;
    background: #007bff;
    color: white;
    padding: 12px 24px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.95rem;
    transition: background 0.2s;
}

.file-label:hover {
    background: #0056b3;
}

.upload-button {
    width: 100%;
    background: #28a745;
    color: white;
    border: none;
    padding: 12px;
    border-radius: 6px;
    font-size: 1rem;
    cursor: pointer;
    transition: background 0.2s;
    margin-bottom: 20px;
}

.upload-button:hover:not(:disabled) {
    background: #218838;
}

.upload-button:disabled {
    background: #6c757d !important;
    cursor: not-allowed;
    opacity: 0.7;
    transform: none;
}

.upload-button:disabled:hover {
    background: #6c757d !important;
    transform: none;
}

.features {
    display: flex;
    justify-content: center;
    gap: 20px;
    flex-wrap: wrap;
}

.feature {
    color: #6c757d;
    font-size: 0.85rem;
}

.loading {
    text-align: center;
    color: #007bff;
    font-weight: 500;
    display: none;
}

/* 响应区域 */
#response {
    max-height: 500px;
    overflow-y: auto;
    margin-top: 20px;
}

#response::-webkit-scrollbar {
    width: 6px;
}

#response::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

#response::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
}

#response::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

/* 响应结果样式 */
.response-item {
    margin: 10px 0;
    padding: 15px;
    border-radius: 8px;
    border-left: 4px solid;
    background: #fff;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    word-wrap: break-word;
    word-break: break-all;
    overflow-wrap: break-word;
}

/* 文件信息样式 */
.file-info {
    margin-bottom: 8px;
    font-size: 1rem;
    color: #155724;
}

.file-link {
    margin-bottom: 12px;
}

.file-link a {
    color: #0066cc;
    text-decoration: none;
    word-break: break-all;
    display: inline-block;
    max-width: 100%;
    line-height: 1.4;
    padding: 6px 10px;
    background: rgba(0, 102, 204, 0.1);
    border-radius: 4px;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
}

.response-success {
    border-left-color: #28a745;
    background: #f8fff9;
    color: #155724;
}

.response-error {
    border-left-color: #dc3545;
    background: #fff5f5;
    color: #721c24;
}

.response-success a:not(.file-link > a) {
    color: #0066cc;
    text-decoration: none;
    word-break: break-all;
    display: inline-block;
    max-width: 100%;
    line-height: 1.4;
    margin: 4px 0;
    padding: 4px 8px;
    background: rgba(0, 102, 204, 0.1);
    border-radius: 4px;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
}

.response-success a:hover {
    text-decoration: underline;
}

/* 复制按钮容器 */
.copy-links {
    margin-top: 12px;
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
}

/* 复制按钮样式 */
.copy-code {
    background: #007bff;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.85rem;
    transition: all 0.2s ease;
    user-select: none;
    display: inline-block;
}

/* 短链特殊样式 */
.response-success:has([data-clipboard-text*="/s/"]) {
    border-left-color: #17a2b8;
    background: #f0f9ff;
}

.response-success:has([data-clipboard-text*="/s/"]) .copy-code:first-child {
    background: #17a2b8;
}

.response-success:has([data-clipboard-text*="/s/"]) .copy-code:first-child:hover {
    background: #138496;
}

.copy-code:hover {
    background: #0056b3;
    transform: translateY(-1px);
}

.copy-code:active {
    transform: translateY(0);
}

/* 复制成功状态 */
.copy-code.copied {
    background: #28a745;
}

/* 上传进度样式 */
.upload-progress {
    margin: 10px 0;
    padding: 15px;
    border-radius: 8px;
    background: #fff;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border-left: 4px solid #007bff;
}

.progress-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.file-name {
    font-weight: 500;
    color: #333;
    word-break: break-all;
    flex: 1;
    margin-right: 10px;
}

.progress-text {
    color: #666;
    font-size: 0.9rem;
    white-space: nowrap;
}

.progress-status {
    color: #007bff;
    font-size: 0.85rem;
    margin-bottom: 8px;
    font-style: italic;
}

.progress-bar {
    width: 100%;
    height: 8px;
    background: #e9ecef;
    border-radius: 4px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #007bff, #0056b3);
    border-radius: 4px;
    transition: width 0.2s ease-out;
    position: relative;
    overflow: hidden;
}

.progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.3),
        transparent
    );
    animation: shimmer 2s infinite;
}

@keyframes shimmer {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(100%);
    }
}

/* 响应式 */
@media (max-width: 480px) {
    .main-container {
        margin: 10px auto;
        padding: 0 10px;
    }
    
    .main-container h1 {
        font-size: 1.5rem;
    }
    
    .upload-box {
        padding: 20px 15px;
    }
    
    .drop-zone {
        padding: 30px 15px;
    }
    
    .features {
        gap: 15px;
    }
    
    .response-item {
        padding: 12px;
        font-size: 0.9rem;
    }
    
    .copy-links {
        gap: 6px;
    }
    
    .copy-code {
        padding: 5px 10px;
        font-size: 0.8rem;
    }
    
    /* 短链在移动设备上的样式 */
    .response-success:has([data-clipboard-text*="/s/"]) {
        border-left-color: #17a2b8;
        background: #f0f9ff;
    }
    
    .progress-info {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }
    
    .file-name {
        margin-right: 0;
    }
}</style>

<script>
// 分片上传配置
const CHUNK_SIZE = 10 * 1024 * 1024; // 10MB per chunk
const MAX_CONCURRENT_UPLOADS = 3; // 最大并发上传数

// 拖拽上传功能
document.addEventListener('DOMContentLoaded', function() {
    const dropZone = document.getElementById('dropZone');
    const fileInput = document.getElementById('uploadFile');
    const fileLabel = document.getElementById('uploadFileLabel');
    const uploadButton = document.getElementById('uploadButton');
    const loading = document.getElementById('loading');
    const response = document.getElementById('response');
    
    // 防止默认拖拽行为
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });
    
    // 高亮拖拽区域
    ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, unhighlight, false);
    });
    
    // 处理文件拖拽
    dropZone.addEventListener('drop', handleDrop, false);
    
    // 上传按钮点击事件
    uploadButton.addEventListener('click', function() {
        if (fileInput.files.length > 0) {
            uploadFiles(fileInput.files);
        }
    });
    
    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    
    function highlight(e) {
        dropZone.classList.add('drag-over');
    }
    
    function unhighlight(e) {
        dropZone.classList.remove('drag-over');
    }
    
    function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        
        fileInput.files = files;
        updateFileLabel(files);
        updateUploadButton(files);
    }
    
    function updateFileLabel(files) {
        if (files.length > 0) {
            if (files.length === 1) {
                fileLabel.textContent = `File: ${files[0].name}`;
            } else {
                fileLabel.textContent = `File count: ${files.length}`;
            }
            fileLabel.style.background = '#28a745';
        } else {
            fileLabel.textContent = '选择文件';
            fileLabel.style.background = '#007bff';
        }
    }
    
    function updateUploadButton(files) {
        if (files && files.length > 0) {
            uploadButton.disabled = false;
            uploadButton.textContent = '⬆️ UPLOAD';
            uploadButton.style.background = '#28a745';
        } else {
            uploadButton.disabled = true;
            uploadButton.textContent = '🈳 No file';
            uploadButton.style.background = '#6c757d';
        }
    }
    
    // 文件选择事件
    fileInput.addEventListener('change', function() {
        updateFileLabel(this.files);
        updateUploadButton(this.files);
    });
    
    // 上传文件函数
    async function uploadFiles(files) {
        loading.style.display = 'block';
        uploadButton.disabled = true;
        
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            try {
                if (file.size > CHUNK_SIZE) {
                    await uploadLargeFile(file);
                } else {
                    await uploadSmallFile(file);
                }
            } catch (error) {
                console.error('Upload failed:', error);
                showResponse(`Upload failed for ${file.name}: ${error.message}`, false);
            }
        }
        
        loading.style.display = 'none';
        uploadButton.disabled = false;
        
        // 重置文件选择
        fileInput.value = '';
        updateFileLabel([]);
        updateUploadButton([]);
    }
    
    // 上传小文件（<10MB）
    async function uploadSmallFile(file) {
        // 创建进度显示
        const progressDiv = createProgressDisplay(file.name, 1);
        
        try {
            await uploadSmallFileWithProgress(file, progressDiv);
        } catch (error) {
            progressDiv.remove();
            throw error;
        }
    }
    
    // 带进度的小文件上传
    function uploadSmallFileWithProgress(file, progressDiv) {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            const formData = new FormData();
            formData.append('file', file);
            
            const progressText = progressDiv.querySelector('.progress-text');
            const progressFill = progressDiv.querySelector('.progress-fill');
            const progressStatus = progressDiv.querySelector('.progress-status');
            
            // 监听上传进度
            xhr.upload.addEventListener('progress', (e) => {
                if (e.lengthComputable) {
                    const percentage = Math.round((e.loaded / e.total) * 100);
                    progressText.textContent = `${percentage}%`;
                    progressFill.style.width = `${percentage}%`;
                    
                    if (percentage < 100) {
                        progressStatus.textContent = 'Uploading...';
                    }
                }
            });
            
            xhr.addEventListener('load', () => {
                if (xhr.status === 200) {
                    try {
                        const result = JSON.parse(xhr.responseText);
                        if (result.code === 1) {
                            // 显示完成状态
                            progressText.textContent = '100%';
                            progressFill.style.width = '100%';
                            progressStatus.textContent = 'Upload complete!';
                            
                            // 延迟一下再移除进度条，让用户看到100%
                            setTimeout(() => {
                                progressDiv.remove();
                                showResponse(`uploaded successfully: ${file.name}`, true, result);
                                resolve();
                            }, 500);
                        } else {
                            reject(new Error(result.message || 'Upload failed'));
                        }
                    } catch (error) {
                        reject(new Error('Invalid response format'));
                    }
                } else {
                    reject(new Error(`HTTP ${xhr.status}: ${xhr.statusText}`));
                }
            });
            
            xhr.addEventListener('error', () => {
                progressStatus.textContent = 'Upload failed';
                progressFill.style.background = '#dc3545';
                reject(new Error('Network error during upload'));
            });
            
            xhr.addEventListener('timeout', () => {
                progressStatus.textContent = 'Upload timeout';
                progressFill.style.background = '#dc3545';
                reject(new Error('Upload timeout'));
            });
            
            // 初始状态
            progressStatus.textContent = 'Starting upload...';
            progressText.textContent = '0%';
            progressFill.style.width = '0%';
            
            xhr.open('POST', '/api');
            xhr.send(formData);
        });
    }
    
    // 上传大文件（>=10MB）- 分片上传
    async function uploadLargeFile(file) {
        const totalChunks = Math.ceil(file.size / CHUNK_SIZE);
        const uploadId = generateUploadId();
        const chunkIds = [];
        
        // 创建进度显示和跟踪器
        const progressDiv = createProgressDisplay(file.name, totalChunks);
        const progressTracker = new ProgressTracker(totalChunks, progressDiv);
        
        try {
            // 并发上传分片
            const uploadPromises = [];
            const semaphore = new Semaphore(MAX_CONCURRENT_UPLOADS);
            
            for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {
                const promise = semaphore.acquire().then(async (release) => {
                    try {
                        const start = chunkIndex * CHUNK_SIZE;
                        const end = Math.min(start + CHUNK_SIZE, file.size);
                        const chunk = file.slice(start, end);
                        
                        const chunkId = await uploadChunkWithProgress(
                            chunk, 
                            chunkIndex, 
                            uploadId, 
                            file.name, 
                            progressTracker
                        );
                        chunkIds[chunkIndex] = chunkId;
                        
                        return chunkId;
                    } finally {
                        release();
                    }
                });
                uploadPromises.push(promise);
            }
            
            await Promise.all(uploadPromises);
            
            // 确保所有分块都显示为100%完成
            progressTracker.forceUpdate();
            
            // 显示合并状态
            progressTracker.setStatus('Merging chunks...');
            
            // 合并分片
            const result = await mergeChunks(uploadId, file.name, chunkIds, file.size);
            
            if (result.code === 1) {
                // 显示完成状态
                progressTracker.setStatus('Upload complete!');
                
                // 延迟一下再移除进度条，让用户看到100%
                setTimeout(() => {
                    progressDiv.remove();
                    showResponse(`uploaded successfully: ${file.name}`, true, result);
                }, 500);
            } else {
                throw new Error(result.message || 'Merge failed');
            }
            
        } catch (error) {
            progressDiv.remove();
            throw error;
        }
    }
    
    // 上传单个分片（带进度跟踪）
    async function uploadChunkWithProgress(chunk, chunkIndex, uploadId, fileName, progressTracker) {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            const formData = new FormData();
            
            formData.append('file', chunk, `${fileName}.chunk.${chunkIndex}`);
            formData.append('chunkIndex', chunkIndex);
            formData.append('uploadId', uploadId);
            formData.append('fileName', fileName);
            
            // 监听上传进度
            xhr.upload.addEventListener('progress', (e) => {
                if (e.lengthComputable) {
                    const chunkProgress = (e.loaded / e.total) * 100;
                    progressTracker.updateChunkProgress(chunkIndex, chunkProgress);
                }
            });
            
            xhr.addEventListener('load', () => {
                if (xhr.status === 200) {
                    try {
                        const result = JSON.parse(xhr.responseText);
                        if (result.code === 1) {
                            progressTracker.updateChunkProgress(chunkIndex, 100);
                            resolve(result.chunkId);
                        } else {
                            reject(new Error(result.message || 'Chunk upload failed'));
                        }
                    } catch (error) {
                        reject(new Error('Invalid response format'));
                    }
                } else {
                    reject(new Error(`HTTP ${xhr.status}: ${xhr.statusText}`));
                }
            });
            
            xhr.addEventListener('error', () => {
                reject(new Error('Network error during chunk upload'));
            });
            
            xhr.addEventListener('timeout', () => {
                reject(new Error('Chunk upload timeout'));
            });
            
            xhr.open('POST', '/api/chunk');
            xhr.send(formData);
        });
    }
    
    // 上传单个分片（兼容性保留）
    async function uploadChunk(chunk, chunkIndex, uploadId, fileName) {
        const formData = new FormData();
        formData.append('file', chunk, `${fileName}.chunk.${chunkIndex}`);
        formData.append('chunkIndex', chunkIndex);
        formData.append('uploadId', uploadId);
        formData.append('fileName', fileName);
        
        const response = await fetch('/api/chunk', {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.code === 1) {
            return result.chunkId;
        } else {
            throw new Error(result.message || 'Chunk upload failed');
        }
    }
    
    // 合并分片
    async function mergeChunks(uploadId, fileName, chunkIds, fileSize) {
        const response = await fetch('/api/merge', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                uploadId: uploadId,
                fileName: fileName,
                chunkIds: chunkIds,
                fileSize: fileSize
            })
        });
        
        return await response.json();
    }
    
    // 生成上传ID
    function generateUploadId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }
    
    // 创建进度显示
    function createProgressDisplay(fileName, totalChunks) {
        const progressDiv = document.createElement('div');
        progressDiv.className = 'upload-progress';
        progressDiv.innerHTML = `
            <div class="progress-info">
                <span class="file-name">${fileName}</span>
                <span class="progress-text">0%</span>
            </div>
            <div class="progress-status">Uploading...</div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: 0%"></div>
            </div>
        `;
        response.appendChild(progressDiv);
        return progressDiv;
    }
    
    // 更新进度
    function updateProgress(progressDiv, completed, total, status = null) {
        const progressText = progressDiv.querySelector('.progress-text');
        const progressFill = progressDiv.querySelector('.progress-fill');
        const progressStatus = progressDiv.querySelector('.progress-status');
        
        const percentage = Math.round((completed / total) * 100);
        progressText.textContent = `${percentage}%`;
        progressFill.style.width = `${percentage}%`;
        
        if (status) {
            progressStatus.textContent = status;
        } else if (percentage === 100) {
            progressStatus.textContent = 'Processing...';
        } else {
            progressStatus.textContent = 'Uploading...';
        }
    }
    
    // 显示响应结果
    function showResponse(message, isSuccess, result = null) {
        console.log(result)
        const responseDiv = document.createElement('div');
        responseDiv.className = `response-item ${isSuccess ? 'response-success' : 'response-error'}`;
        
        let content = `<div class="file-info">${message}</div>`;
        
        if (isSuccess && result) {
            if (result.shortFileUrl) {
                content += `<div class="file-link"><a href="${result.shortFileUrl}" target="_blank">${result.shortFileUrl}</a></div>`;
            }
            content += '<div class="copy-links">';
        
            if (result.shortFileUrl) {
                content += `<button class="copy-code" data-clipboard-text="${result.shortFileUrl}">Copy Link</button>`;
            }
            content += '</div>';
        }
        
        responseDiv.innerHTML = content;
        response.appendChild(responseDiv);
        
        // 添加复制功能
        responseDiv.querySelectorAll('.copy-code').forEach(button => {
            button.addEventListener('click', function() {
                const text = this.getAttribute('data-clipboard-text');
                navigator.clipboard.writeText(text).then(() => {
                    const originalText = this.textContent;
                    this.textContent = 'Copied!';
                    this.classList.add('copied');
                    setTimeout(() => {
                        this.textContent = originalText;
                        this.classList.remove('copied');
                    }, 2000);
                });
            });
        });
        
        // 滚动到最新响应
        responseDiv.scrollIntoView({ behavior: 'smooth' });
    }
    
    // 进度跟踪器类
    class ProgressTracker {
        constructor(totalChunks, progressDiv) {
            this.totalChunks = totalChunks;
            this.progressDiv = progressDiv;
            this.chunkProgress = new Array(totalChunks).fill(0);
            this.lastUpdateTime = 0;
            this.updateThrottle = 300; // 限制更新频率为300ms
            this.startTime = Date.now();
            this.lastProgress = 0;
            this.progressHistory = [];
        }
        
        updateChunkProgress(chunkIndex, progress) {
            this.chunkProgress[chunkIndex] = progress;
            
            // 节流更新，避免过于频繁的DOM操作
            const now = Date.now();
            if (now - this.lastUpdateTime > this.updateThrottle) {
                this.updateDisplay();
                this.lastUpdateTime = now;
            }
        }
        
        updateDisplay() {
            const totalProgress = this.chunkProgress.reduce((sum, progress) => sum + progress, 0);
            const overallProgress = totalProgress / this.totalChunks;
            
            const progressText = this.progressDiv.querySelector('.progress-text');
            const progressFill = this.progressDiv.querySelector('.progress-fill');
            
            const percentage = Math.round(overallProgress);
            
            // 更新进度显示
            progressText.textContent = `${percentage}%`;
            progressFill.style.width = `${percentage}%`;
            
            // 只有当进度有实际变化时才记录历史
            const now = Date.now();
            if (percentage !== this.lastProgress) {
                this.progressHistory.push({
                    time: now,
                    progress: percentage
                });
                
                // 只保留最近10秒的历史记录，并限制记录数量
                this.progressHistory = this.progressHistory
                    .filter(record => now - record.time < 10000)
                    .slice(-20); // 最多保留20个记录点
            }
            
            // 更新状态文本（如果不是在合并阶段）
            const progressStatus = this.progressDiv.querySelector('.progress-status');
            if (progressStatus && !progressStatus.textContent.includes('Merging')) {
                if (percentage < 100) {
                    // 只有在有足够历史数据且进度变化时才显示速度
                    if (this.progressHistory.length >= 3 && percentage > this.lastProgress) {
                        const speed = this.calculateSpeed();
                        const eta = this.calculateETA(percentage, speed);
                        
                        if (speed > 0.1 && eta > 0 && eta < 3600) {
                            progressStatus.textContent = `Uploading... (${this.formatSpeed(speed)}, ETA: ${this.formatTime(eta)})`;
                        } else {
                            progressStatus.textContent = 'Uploading...';
                        }
                    } else {
                        progressStatus.textContent = 'Uploading...';
                    }
                } else {
                    progressStatus.textContent = 'Processing...';
                }
            }
            
            this.lastProgress = percentage;
        }
        
        calculateSpeed() {
            if (this.progressHistory.length < 3) return 0;
            
            const recent = this.progressHistory[this.progressHistory.length - 1];
            const older = this.progressHistory[0];
            
            const timeDiff = (recent.time - older.time) / 1000; // 秒
            const progressDiff = recent.progress - older.progress;
            
            // 防止异常值：时间差太小或进度差为负
            if (timeDiff < 0.5 || progressDiff <= 0) return 0;
            
            const speed = progressDiff / timeDiff;
            
            // 限制速度范围，防止异常值
            return Math.min(Math.max(speed, 0), 50); // 最大50%/s
        }
        
        calculateETA(currentProgress, speed) {
            if (speed <= 0 || currentProgress >= 100) return 0;
            
            const remainingProgress = 100 - currentProgress;
            const eta = remainingProgress / speed;
            
            // 限制ETA范围，防止异常值
            return Math.min(eta, 3600); // 最大1小时
        }
        
        formatSpeed(speed) {
            if (speed < 0.1) return '0.1%/s';
            if (speed < 1) return `${speed.toFixed(1)}%/s`;
            return `${speed.toFixed(0)}%/s`;
        }
        
        formatTime(seconds) {
            if (seconds < 1) return '1s';
            if (seconds < 60) {
                return `${Math.round(seconds)}s`;
            } else if (seconds < 3600) {
                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = Math.round(seconds % 60);
                if (remainingSeconds === 0) {
                    return `${minutes}m`;
                }
                return `${minutes}m ${remainingSeconds}s`;
            } else {
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);
                return `${hours}h ${minutes}m`;
            }
        }
        
        setStatus(status) {
            const progressStatus = this.progressDiv.querySelector('.progress-status');
            if (progressStatus) {
                progressStatus.textContent = status;
            }
        }
        
        // 强制更新显示（用于最终状态）
        forceUpdate() {
            // 确保所有分块都是100%
            this.chunkProgress.fill(100);
            this.updateDisplay();
        }
    }
    
    // 信号量实现，用于控制并发数
    class Semaphore {
        constructor(max) {
            this.max = max;
            this.current = 0;
            this.queue = [];
        }
        
        acquire() {
            return new Promise((resolve) => {
                if (this.current < this.max) {
                    this.current++;
                    resolve(() => this.release());
                } else {
                    this.queue.push(() => {
                        this.current++;
                        resolve(() => this.release());
                    });
                }
            });
        }
        
        release() {
            this.current--;
            if (this.queue.length > 0) {
                const next = this.queue.shift();
                next();
            }
        }
    }
});
</script>

{{template "public/footer" .}}
